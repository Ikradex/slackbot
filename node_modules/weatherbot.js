var request = require("request"),
	vsprintf = require("sprintf-js").vsprintf;

function WeatherBot() {}

WeatherBot.REPORT_CURRENT = 1;
WeatherBot.REPORT_TOMORROW = 2;
WeatherBot.REPORT_FORECAST = 3;
WeatherBot.DAYS_IN_WEEK = 7;

WeatherBot.prototype.handleRequest = function (req, res, next) {
	// get args
	var userText = req.body.text,
		argsStr = userText.split(":")[1];

	if (argsStr.trim()) {
		var args = argsStr.split(" ");

		var command = args[0] || "",
			cityCountry = args[1] || "Cork,Ireland"

		switch (command) {
		case "current":
		case "today":
		case "now":
			this.get(res, cityCountry, WeatherBot.REPORT_CURRENT);
			break;
		case "tomorrow":
			this.get(res, cityCountry, WeatherBot.REPORT_FORECAST, 2);
			break;
		case "forecast":
			var numDays = parseInt(args[2]) || 3,
				unitOfDay = args[3] || "days"

			if(unitOfDay == "week" || unitOfDay == "weeks") {
				numDays *= 7;
			}

			numDays += 1; // we remove the first day (today)
			
			this.get(res, cityCountry, WeatherBot.REPORT_FORECAST, numDays);
			break;
		default:
			return res.status(404).send("Not found");
			break;
		}
	}
};

WeatherBot.prototype.get = function (res, cityCountry, reportType, numDays) {
	var botPayload = {
		text: " ",
		attachments: []
	};

	var typeQuery;

	if (reportType == WeatherBot.REPORT_CURRENT) {
		typeQuery = "weather"
	} else if (reportType == WeatherBot.REPORT_TOMORROW || reportType == WeatherBot.REPORT_FORECAST) {
		typeQuery = "forecast/daily"
	} else {
		// error
	}

	var url = vsprintf("http://api.openweathermap.org/data/2.5/%s?q=%s&units=%s", [
		typeQuery, cityCountry, "metric"]);

	if(numDays) {
		url += "&cnt=" + numDays;
	}
	console.log(url);

	this._getReportJson(url, function (resp) {
		var reportJson = this._parseReport(resp, reportType);

		botPayload.attachments = this._buildAttachments(reportJson, reportType);

		return res.status(200).json(botPayload);
	}.bind(this));
};

WeatherBot.prototype._parseReport = function (reportResp, reportType) {
	var reportJson = {
		days: []
	};

	if (reportType == WeatherBot.REPORT_CURRENT) {
		reportJson.days.push({
			city: reportResp.name,
			cityID: reportResp.id,
			countryCode: reportResp.sys.country,
			weatherMain: reportResp.weather[0].main,
			weatherDesc: reportResp.weather[0].description,
			temp: {
				curr: reportResp.main.temp,
				min: reportResp.main.temp_min,
				max: reportResp.main.temp_max
			},
			wind: {
				speed: reportResp.wind.speed,
				deg: reportResp.wind.deg
			},
			clouds: reportResp.clouds.all,
			pressure: reportResp.main.pressure,
			humidity: reportResp.main.humidity,
			icon: reportResp.weather[0].icon,
			dt: reportResp.dt
		});
	} else if(reportType == WeatherBot.REPORT_TOMORROW) {
		var day = reportResp.days[1];

		reportJson.days.push({
			city: reportResp.city.name,
			cityID: reportResp.city.id,
			countryCode: reportResp.city.country,
			weatherMain: day.weather[0].main,
			weatherDesc: day.weather[0].description,
			temp: {
				min: day.temp.min,
				max: day.temp.max,
				morn: day.temp.morn,
				day: day.temp.day,
				eve: day.temp.eve,
				night: day.temp.night
			},
			wind: {
				speed: day.speed,
				deg: day.deg
			},
			clouds: day.clouds,
			pressure: day.pressure,
			humidity: day.humidity,
			icon: day.weather[0].icon,
			rain: day.rain,
			dt: day.dt
		});
	} else if (reportType == WeatherBot.REPORT_FORECAST) {
		reportResp.list.forEach(function(day) {
			reportJson.days.push({
				city: reportResp.city.name,
				cityID: reportResp.city.id,
				countryCode: reportResp.city.country,
				weatherMain: day.weather[0].main,
				weatherDesc: day.weather[0].description,
				temp: {
					min: day.temp.min,
					max: day.temp.max,
					morn: day.temp.morn,
					day: day.temp.day,
					eve: day.temp.eve,
					night: day.temp.night
				},
				wind: {
					speed: day.speed,
					deg: day.deg
				},
				clouds: day.clouds,
				pressure: day.pressure,
				humidity: day.humidity,
				icon: day.weather[0].icon,
				rain: day.rain,
				dt: day.dt
			});
		});
	} else {
		// error
	}

	return reportJson;
};

WeatherBot.prototype._buildAttachments = function (reportJson, reportType) {
	var attachments = [];

	var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
		months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

	if(reportType == WeatherBot.REPORT_CURRENT) {
		var dayJson = reportJson.days[0];

		var date = new Date();
		date.setTime(dayJson.dt * 1000);

		var day = days[date.getDay()],
			month = months[date.getMonth()];

		attachments.push({
			"fallback": vsprintf("Current weather for %s, %s: %s", [dayJson.city, dayJson.countryCode, dayJson.weatherDesc]),
			//"pretext": vsprintf("*Current weather in %s, %s*", [city, countryCode]),
			"title": vsprintf("%s - %s - %s", [
				day, [dayJson.city, dayJson.countryCode].join(", "), dayJson.weatherMain
			]),
			"title_link": vsprintf("http://openweathermap.org/city/%s", [dayJson.cityID]),
			"thumb_url": vsprintf("http://openweathermap.org/img/w/%s.png", [dayJson.icon]),
			"text": vsprintf("*%s:* %s", [vsprintf("%s %s", [date.getDate(), month]), dayJson.weatherDesc]),
			"fields": [{
				"title": "Temp",
				"value": vsprintf("%s °C, (Min) %s °C, (Max) %s °C", [dayJson.temp.curr, dayJson.temp.min, dayJson.temp.max]),
				"short": true
			}, {
				"title": "Overcast",
				"value": dayJson.clouds + "%",
				"short": true
			}, {
				"title": "Humidity",
				"value": dayJson.humidity + "%",
				"short": true
			}, {
				"title": "Pressure",
				"value": dayJson.pressure + " hpa",
				"short": true
			}, {
				"title": "Wind",
				"value": dayJson.wind.speed + " m/s",
				"short": true
			}],
			"color": "#439FE0",
			"mrkdwn_in": ["text"]
		});
	} else if(reportType = WeatherBot.REPORT_FORECAST || reportType == WeatherBot.REPORT_TOMORROW) {
		reportJson.days.forEach(function(dayJson) {
			var date = new Date();
			date.setTime(dayJson.dt * 1000);

			var day = days[date.getDay()],
				month = months[date.getMonth()];

			attachments.push({
				"fallback": vsprintf("Weather for %s, %s: %s", [dayJson.city, dayJson.countryCode, dayJson.weatherDesc]),
				//"pretext": vsprintf("*Current weather in %s, %s*", [city, countryCode]),
				"title": vsprintf("%s - %s - %s", [
					day, [dayJson.city, dayJson.countryCode].join(", "), dayJson.weatherMain
				]),
				"title_link": vsprintf("http://openweathermap.org/city/%s", [dayJson.cityID]),
				"thumb_url": vsprintf("http://openweathermap.org/img/w/%s.png", [dayJson.icon]),
				"text": vsprintf("*%s:* %s", [vsprintf("%s %s", [date.getDate(), month]), dayJson.weatherDesc]),
				"fields": [{
					"title": "Temp",
					"value": vsprintf("Morn: %s °C, Day: %s °C, \nEve: %s °C, Night: %s °C", [dayJson.temp.morn, dayJson.temp.day, dayJson.temp.eve, dayJson.temp.night]),
					"short": true
				}, {
					"title": "Overcast",
					"value": dayJson.clouds + "%",
					"short": true
				}, {
					"title": "Humidity",
					"value": dayJson.humidity + "%",
					"short": true
				}, {
					"title": "Pressure",
					"value": dayJson.pressure + " hpa",
					"short": true
				}, {
					"title": "Wind",
					"value": dayJson.wind.speed + " m/s",
					"short": true
				}],
				"color": "#439FE0",
				"mrkdwn_in": ["text"]
			});
		});

		attachments.shift(); //shitty way of ignoring first day report
	} else {
		// error
		return;
	}

	return attachments;
};


WeatherBot.prototype._getReportJson = function (url, callback) {
	request({
		url: url,
		json: true
	}, function (error, resp, body) {
		if (!error && resp.statusCode === 200) {
			callback(body);
		}
	})
};

module.exports = WeatherBot;