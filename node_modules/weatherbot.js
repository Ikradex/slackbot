var request = require("request"),
	vsprintf = require("sprintf-js").vsprintf;

function WeatherBot() {
	this.handleRequest = function (req, res, next) {
		// get args
		var userText = req.body.text,
			argsStr = userText.split(":")[1];

		if (!argsText.trim()) {
			var args = argsStr.split(" ");

			var command = args[0] || "",
				cityName = args[1] || "Cork",
				countryName = args[2] || "Ireland"

			switch command {
			case "current":
			case "today":
			case "now":
				this.getCurrent(res, cityName, countryName);
				break;
			case "tomorrow":
				//this.getTomorrow(args);
				break;
			case "forecast":
				//this.getForecast(args)
				break;
			default:
				//error
				break;
			}
		}

		switch args.shift()
	};

	this.getCurrent = function (res, cityName, countryName) {
		var botPayload = {
			text: " ",
			mrkdwn: true,
			attachments: []
		};

		this._getReportJson(vsprintf("http://api.openweathermap.org/data/2.5/weather?q=%s&units=%s", [
			[cityName, countryName].join(","), "metric"
		]), function (resp) {
			var reportJson = this._parseReport(resp, WeatherBot.REPORT_CURRENT),
				botPayload.attachments = this._buildAttachments(reportJson, WeatherBot.REPORT_CURRENT);

			return res.status(200).json(botPayload);
		});
	}

	this._getReportJson = function (url, callback) {
		request({
			url: url,
			json: true
		}, function (error, resp, body) {
			if (!error && resp.statusCode === 200) {
				callback(body);
			}
		})
	};

	this._buildAttachments = function (reportJson, reportType) {
		var attachments = [];

		var date = new Date();
		date.setTime(body.dt);

		var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
			months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

		var day = days[date.getDay()],
			month = months[date.getMonth()];

		var attachment = {
			"fallback": vsprintf("Current weather for %s, %s: %s", [city, countryCode, weatherDesc]),
			//"pretext": vsprintf("*Current weather in %s, %s*", [city, countryCode]),
			"title": vsprintf("%s - %s - %s", [
				day, [city, countryCode].join(", "), weatherMain
			]),
			"title_link": vsprintf("http://openweathermap.org/city/%s", [cityID]),
			"thumb_url": vsprintf("http://openweathermap.org/img/w/%s.png", [icon]),
			"text": vsprintf("*%s:* %s", [vsprintf("%s %s", [date.getDate(), month]), weatherDesc]),
			"fields": [{
				"title": "Temp",
				"value": reportJson.temp + "&#176;",
				"short": true
			}, {
				"title": "Temp (Min)",
				"value": reportJson.temp.min + "&#176;",
				"short": true
			}, {
				"title": "Temp (Max)",
				"value": reportJson.temp.max + "&#176;",
				"short": true
			}, {
				"title": "Humidity",
				"value": reportJson.humidity + "%",
				"short": true
			}, {
				"title": "Pressure",
				"value": reportJson.pressure + " hpa",
				"short": true
			}, {
				"title": "Wind",
				"value": reportJson.speed + " m/s",
				"short": true
			}],
			"color": "#439FE0",
			"mrkdwn_in": ["text"]
		}

		return attachments;
	};

	this._parseReport = function (reportJson, reportType) {
		var reportJson = {
			days: 1,
			city: "",
			cityID: "",
			countryCode: "",
			weatherMain: "",
			weatherDesc: ""
			temp: {
				curr: "",
				min: "",
				max: ""
			},
			wind: {
				speed: "",
				deg: ""
			},
			pressure: "",
			humidity: ""
			rain: ""
		};

		if (reportType == WeatherBot.REPORT_CURRENT) {
			reportJson.city = body.name;
			reportJson.cityID = body.id;
			reportJson.countryCode = body.sys.country;
			reportJson.weatherMain = reportJson.weather[0].main;
			reportJson.weatherDesc = reportJson.weather[0].description;
			reportJson.icon = body.weather[0].icon;
			reportJson.dt = body.dt;
		} else if (reportType == WeatherBot.REPORT_FORECAST) {

		} else {
			// error
		}

		return reportJson;
	}
}

WeatherBot.REPORT_CURRENT = 1;
WeatherBot.REPORT_FORECAST = 2;

module.exports = WeatherBot;