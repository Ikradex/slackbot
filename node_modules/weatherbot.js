var request = require("request"),
	vsprintf = require("sprintf-js").vsprintf;

function WeatherBot() {
	this.getCurrent = function (req, res, next) {
		var botPayload = {
			text: " ",
			mrkdwn: true,
			attachments: []
		};

		var userText = req.body.text,
			args = userText.split(" ");
		args.shift();

		var cityName = args[0] || "Cork",
			countryName = args[1] || "Ireland"

		request({
				url: vsprintf("http://api.openweathermap.org/data/2.5/weather?q=%s&units=%s", [
					[cityName, countryName].join(","), "metric"
				]),
				json: true
			},
			function (error, resp, body) {
				if (!error && resp.statusCode === 200) {
					var reportJson = body;

					if (reportJson.cod === 200) {
						var city = reportJson.name,
							cityID = reportJson.id,
							countryCode = reportJson.sys.country,
							weatherMain = reportJson.weather[0].main,
							weatherDesc = reportJson.weather[0].description,
							icon = reportJson.weather[0].icon,
							dateTime = reportJson.dt

						var attachment = {
							"fallback": vsprintf("Current weather for %s, %s: %s", [city, countryCode, weatherDesc]),
							//"pretext": vsprintf("*Current weather in %s, %s*", [city, countryCode]),
							"title": vsprintf("%s - %s", [
								[city, countryCode].join(", "), weatherMain
							]),
							"title_link": vsprintf("http://openweathermap.org/city/%s", [cityID]),
							"thumb_url": vsprintf("http://openweathermap.org/img/w/%s.png", [icon]),
							"text": vsprintf("*%s:* %s", [this._formatDateTime(dateTime), weatherDesc]),
							"fields": [{
								"title": "Temp",
								"value": reportJson.main.temp + "&#176;",
								"short": true
							}, {
								"title": "Humidity",
								"value": reportJson.main.humidity + "%",
								"short": true
							}, {
								"title": "Pressure",
								"value": reportJson.main.pressure + " hpa",
								"short": true
							}, {
								"title": "Wind",
								"value": reportJson.wind.speed + " m/s",
								"short": true
							}],
							"color": "#439FE0",
							"mrkdwn_in": ["text"]
						}

						botPayload.attachments.push(attachment);
						return res.status(200).json(botPayload);
					}
				}
			});
	}

	this.getForecast = function () {

	};

	this._formatDateTime = function (dt) {
		var date = new Date(dt);

		return [date.getDate(), date.getMonth() + 1, date.getYear()].join("/");
	}
}

module.exports = WeatherBot;